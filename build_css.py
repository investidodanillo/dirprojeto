import os
import re

# Ordem dos arquivos CSS baseada nas depend√™ncias
FILES = [
    # Base (funda√ß√£o)
    "Base/_reset.css",
    "Base/_variables.css",
    "Base/_typography.css",
    "Base/_base.css",
    "Base/_utilities.css",
    
    # Layouts (estrutura principal)
    "Layouts/_grid.css",
    "Layouts/_dashboard.css",
    "Layouts/_auth.css",
    "Layouts/_responsive.css",
    
    # Components (elementos de UI - ordem por frequ√™ncia de uso)
    "Components/_navbars.css",
    "Components/_sidebar.css",
    "Components/_buttons.css",
    "Components/_badges.css",
    "Components/_forms.css",
    "Components/_forms-filtro.css",
    "Components/_tables.css",
    "Components/_modals.css",
    "Components/_alerts.css",
    "Components/_cards.css",
    "Components/_progressbars.css",
    "Components/_charts.css",
    "Components/_kamban.css",
    "Components/_footer.css",
    
    # Themes (temas - o padr√£o primeiro)
    "Themes/_default.css",
    "Themes/_dark.css",
    "Themes/_high-contrast.css",
    
    # Vendors (bibliotecas externas)
    "Vendors/dataTables.css",
    "Vendors/_chartjs.css",
]

INPUT_DIR = "projeto\static\css"
OUTPUT_FILE = "projeto\static/css/main.min.css"
OUTPUT_FILE_DEV = "projeto\static/css/main.css"  # Vers√£o desenvolvimento (n√£o minificada)

def minify_css(css: str) -> str:
    """Remove coment√°rios, espa√ßos e quebras de linha para reduzir tamanho."""
    # Remove coment√°rios /* ... */
    css = re.sub(r"/\*.*?\*/", "", css, flags=re.DOTALL)
    # Remove espa√ßos extras
    css = re.sub(r"\s+", " ", css)
    # Remove espa√ßo antes/depois de {} ; : ,
    css = re.sub(r"\s*([{};:,])\s*", r"\1", css)
    # Remove √∫ltimo ponto e v√≠rgula
    css = re.sub(r";\s*}", "}", css)
    # Remove espa√ßos no come√ßo/fim
    return css.strip()

def build_main_css():
    print("üî® Concatenando arquivos CSS...")
    combined_css = ""
    missing_files = []

    for fname in FILES:
        path = os.path.join(INPUT_DIR, fname)
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                css_content = f.read()
                # Adiciona coment√°rio com nome do arquivo (apenas na vers√£o dev)
                combined_css += f"\n/* === {fname} === */\n" + css_content + "\n"
            print(f"‚úÖ {fname}")
        else:
            print(f"‚ö†Ô∏è  Aviso: {fname} n√£o encontrado")
            missing_files.append(fname)

    # Salvar vers√£o desenvolvimento (n√£o minificada)
    with open(OUTPUT_FILE_DEV, "w", encoding="utf-8") as out:
        out.write(combined_css)
    print(f"‚úÖ Arquivo de desenvolvimento gerado: {OUTPUT_FILE_DEV}")

    # Minifica√ß√£o para produ√ß√£o
    minified_css = minify_css(combined_css)

    # Salvar vers√£o minificada
    with open(OUTPUT_FILE, "w", encoding="utf-8") as out:
        out.write(minified_css)

    # Estat√≠sticas
    original_size = len(combined_css.encode('utf-8'))
    minified_size = len(minified_css.encode('utf-8'))
    reduction = ((original_size - minified_size) / original_size) * 100

    print(f"‚úÖ Arquivo de produ√ß√£o gerado: {OUTPUT_FILE}")
    print(f"üìä Estat√≠sticas:")
    print(f"   - Tamanho original: {original_size:,} bytes")
    print(f"   - Tamanho minificado: {minified_size:,} bytes")
    print(f"   - Redu√ß√£o: {reduction:.1f}%")
    
    if missing_files:
        print(f"‚ö†Ô∏è  Arquivos n√£o encontrados: {len(missing_files)}")
        for missing in missing_files:
            print(f"   - {missing}")

def check_css_structure():
    """Verifica se a estrutura de diret√≥rios est√° correta"""
    print("üîç Verificando estrutura de diret√≥rios...")
    
    required_dirs = ["Base", "Components", "Layouts", "Themes", "Vendors"]
    for dir_name in required_dirs:
        dir_path = os.path.join(INPUT_DIR, dir_name)
        if os.path.exists(dir_path):
            print(f"‚úÖ Diret√≥rio {dir_name}/ encontrado")
        else:
            print(f"‚ùå Diret√≥rio {dir_name}/ n√£o encontrado")

if __name__ == "__main__":
    print("üöÄ Iniciando build do CSS...")
    check_css_structure()
    print("\n" + "="*50)
    build_main_css()
    print("\nüéâ Build conclu√≠do!")